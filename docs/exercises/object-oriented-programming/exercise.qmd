

# "Game Loop" Exercise (RPS)

In this exercise we will practice refactoring using an object oriented approach.


We will create a game of Rock, Paper, Scissors which allows a user to play as many times as they want. The game should keep track of the number of games played, and the user's win percentage.

We will start with some starter code, then we will refactor it, and test the app to make sure it works.

## [Starter Code](./repo/app/game_loop_starter.py)

Create a file in the "app" directory called "game_loop.py" and place the following contents inside:


```python
# this is the "app/game_loop.py" file (v1 starter)...

from random import choice

VALID_OPTIONS = ["rock", "paper", "scissors"]

player_name = input("Please provide a Player Name: ")
print("WELCOME,", player_name, "to my RPS game!")

# GAME LOOP

game_count = 0
win_count = 0

while True:

    user_choice = input("Please choose an option ('rock', 'paper', or 'scissors'): ").lower()
    print("USER CHOSE:", user_choice)

    while user_choice not in VALID_OPTIONS:
        print("INVALID SELECTION. PLEASE TRY AGAIN!")
        user_choice = input("Please choose an option ('rock', 'paper', or 'scissors'): ").lower()
        print("USER CHOSE:", user_choice)

    # only generate computer choice, etc. if user choice is valid!
    computer_choice = choice(VALID_OPTIONS)
    print("COMPUTER CHOSE:", computer_choice)

    # determine outcome:
    if user_choice == computer_choice:
        outcome = "TIE"
    elif user_choice == "rock" and computer_choice == "paper":
        outcome = "LOSE"
    elif user_choice == "rock" and computer_choice == "scissors":
        outcome = "WIN"
    elif user_choice == "paper" and computer_choice == "rock":
        outcome = "WIN"
    elif user_choice == "paper" and computer_choice == "scissors":
        outcome = "LOSE"
    elif user_choice == "scissors" and computer_choice == "rock":
        outcome = "LOSE"
    elif user_choice == "scissors" and computer_choice == "paper":
        outcome = "WIN"

    print("OUTCOME:", outcome)

    # update counters and accumulators
    game_count +=1
    if outcome == "WIN":
        win_count += 1

    print("CURRENT STATS... WINS:", win_count,
        "GAMES:", game_count,
        "WIN PCT:", round(win_count/game_count, 2)
    )

    print("----------------------------")
    play_again = input("Would you like to play again? ('Y' / 'N'): ").upper()
    if play_again == "N":
        print("THANKS FOR PLAYING!")
        break

```

The game loop that allows a user to play as many games as they want, until they say they want to stop. It also keeps track of wins and losses, and displays win percentage when the user is finished.

Run the file from the command line, and play as many times as you'd like, to see the code is working:

```sh
python -m app.game_loop
```



## [Testing](./repo/test/game_loop_test.py)

The game loop code might be complex and hard to test. Let's refactor and add some tests to ensure the program is calculating win percentage correctly.

Following a test-driven development approach, let's implement some tests, for example in the "test/game_loop_test.py" file:

```python
# this is the "test/game_loop_test.py" file...

from app.game_loop import GameLoop


def test_winner_determination():

    game = GameLoop()

    assert game.determine_outcome(u="rock", c="rock") == "TIE"
    assert game.determine_outcome(u="rock", c="paper") == "LOSE"
    assert game.determine_outcome(u="rock", c="scissors") == "WIN"
    assert game.determine_outcome(u="paper", c="rock") == "WIN"
    assert game.determine_outcome(u="paper", c="paper") == "TIE"
    assert game.determine_outcome(u="paper", c="scissors") == "LOSE"
    assert game.determine_outcome(u="scissors", c="scissors") == "TIE"
    assert game.determine_outcome(u="scissors", c="paper") == "WIN"
    assert game.determine_outcome(u="scissors", c="rock") == "LOSE"


def test_win_statistics():

    game = GameLoop()

    game.play(u="rock", c="paper")
    assert game.game_count == 1
    assert game.win_count == 0
    assert game.win_pct == 0

    game.play(u="rock", c="paper")
    assert game.game_count == 2
    assert game.win_count == 0
    assert game.win_pct == 0

    game.play(u="rock", c="scissors")
    assert game.game_count == 3
    assert game.win_count == 1
    assert game.win_pct == 0.33

```

These tests describe the desired behavior of a `GameLoop` class we have not yet implemented. Right now the tests will fail. It's our objective to implement the class to make the tests pass.

## Refactoring

Refactor the "game_loop.py" code into a custom class called `GameLoop`, using code like the following to get started:

```python
# this is the "app/game_loop.py" file (v2 starter)...

class GameLoop:
    pass # TODO: write code to complete the class definition


if __name__ == "__main__":

    # to play a single game:
    #game = GameLoop()
    #print(game.welcome_message)
    #game.play()

    # to play as many games as the user wants:
    game = GameLoop()
    print(game.welcome_message)
    game.play_until_satisfied()


```

Update the "app/game_loop.py" file as necessary to make the tests pass. The "app/game_loop.py" file should also run on its own, asking for user inputs to play the game, and asking them whether they want to play again.

:::{.callout-warning title="Spoiler Alert"}
See the game loop ["game_loop_solutions.py" file](./repo/app/game_loop_solutions.py) for a completed class definition.
:::
